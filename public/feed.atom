<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://asquare.blog/</id>
    <title>Anshuman Agrawal</title>
    <updated>2025-09-22T16:25:01.717Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Anshuman Agrawal</name>
        <email>asquare567@gmail.com</email>
        <uri>https://asquare.blog</uri>
    </author>
    <link rel="alternate" href="https://asquare.blog/"/>
    <link rel="self" href="https://asquare.blog/feed.atom"/>
    <subtitle>Notes, projects, and research logs</subtitle>
    <logo>https://asquare.blog/avatar.png</logo>
    <icon>https://asquare.blog/asquare_black.png</icon>
    <rights>CC BY-NC-SA 4.0</rights>
    <entry>
        <title type="html"><![CDATA[Blog]]></title>
        <id>https://asquare.blog/posts/my-post</id>
        <link href="https://asquare.blog/posts/my-post"/>
        <updated>2025-09-22T16:25:01.712Z</updated>
        <content type="html"><![CDATA[<p>abara ka dabra</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 101]]></title>
        <id>https://asquare.blog/posts/ai101</id>
        <link href="https://asquare.blog/posts/ai101"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>Artificial Intelligence and It's applications</h3>
<p>There isn't one universally accepted definition of AI. Think of Artificial Intelligence as the science of making machines that perform tasks that would normally require human intelligence.</p>
<p>It's applications include:</p>
<ul>
<li>Healthcare: Disease diagnosis, treatment, and prevention</li>
<li>Finance: Fraud detection, algorithmic trading, portfolio management</li>
<li>Transportation: Self-driving cars, traffic management, route optimization in google maps</li>
<li>Personal Assistants: Device Integrated assistants like siri, alexa, google assistant</li>
<li>Robotics: Household helpers, industrial automation, military robots</li>
<li>Education: Personalized learning with adaptive learning algorithms, autograding</li>
</ul>
<h3>so what does intelligence mean?</h3>
<p>The field is often broken down into four major goals or schools of thought, organized along two dimensions: thinking vs. acting and humanly vs. rationally.</p>
<ol>
<li>
<p>Thinking Humanly (The Cognitive Modeling Approach): This approach aims to build systems that think like humans. To do this, we would need to understand the actual workings of the human brain. This is the domain of Cognitive Science, which uses computational models from AI and experimental techniques from psychology to construct testable theories of the human mind.</p>
</li>
<li>
<p>Acting Humanly (The Turing Test Approach): This is the classic &quot;imitation game&quot; proposed by Alan Turing in 1950. A system passes the Turing Test if a human interrogator, after posing some written questions, cannot tell whether the written responses come from a person or a computer. This test focuses on behavior, not the underlying thought processes. While historically significant, it's not a central focus of AI research today, as it's more a test of deception than true intelligence.</p>
</li>
<li>
<p>Thinking Rationally (The &quot;Laws of Thought&quot; Approach): This approach is rooted in formal logic, dating back to Aristotle. The idea is to build systems that reason through syllogisms and logical deduction. For example, if we know &quot;Socrates is a man&quot; and &quot;All men are mortal,&quot; a rational thinking system can deduce that &quot;Socrates is mortal.&quot; The challenge is that the real world is messy and uncertain; not everything can be represented in clean, formal logic.</p>
</li>
<li>
<p>Acting Rationally (The Rational Agent Approach): This is the dominant approach in modern AI. It focuses on creating agents that act to achieve the best expected outcome. An agent doesn't need to think like a human; it just needs to do the right thing. For example, a self-driving car braking to avoid an accident is acting rationally, regardless of whether its internal &quot;thought process&quot; resembles a human driver's. This approach is more general and mathematically well-defined, as it allows us to build systems that solve problems, even if their methods are inhumanly fast or complex.</p>
</li>
</ol>
<h3>Techniques of Artificial Intelligence</h3>
<p>(for reading reference only)</p>
<ul>
<li>Searching: Brute force, heuristic search, A* Search</li>
<li>Knowledge Representation: Logic, Semantic networks, ontologies</li>
<li>Reasoning: Deductive, inductive, abductive</li>
<li>Machine Learning: Supervised, unsupervised, reinforcement learning</li>
<li>Deep Learning: modeling neural networks</li>
<li>Natural Language Processing: Understanding and generating human language</li>
</ul>
<h3>Level of Models</h3>
<p>A model is a representation of knowledge or patterns about the world that allows a machine to make predictions, decisions, or actions.</p>
<ol>
<li>
<p>Artificial Narrow Intelligence: designed to perform a specific task, for example: stockfish for chess, chatgpt for natural language processing</p>
</li>
<li>
<p>Artificial General Intelligence: designed to perform any task that a human can, no examples yet.</p>
</li>
<li>
<p>Artificial SuperIntelligence: designed to perform any task. (surpasses human intelligence)</p>
</li>
</ol>
<p>so how do we measure how effective an AI is on a particular task?</p>
<h3>Criteria of Success: How Do We Know It's Working?</h3>
<p>The Turing Test provides a philosophical benchmark, but in practice, AI success is measured with concrete, task-specific metrics. We don't ask if a spam filter is &quot;intelligent&quot; in a human sense; we ask, &quot;How accurately does it classify emails?&quot;, we try to quantify the effectiveness of the model to get a sense of how well it's performing rather than just juding using a human's intuition.</p>
<p>Success is defined by performance metrics. These vary by task:</p>
<ul>
<li>
<p>Classification: For tasks like spam detection or image recognition, we use metrics like Accuracy, Precision, Recall, and the F1-Score. These measure how many predictions were correct, how many of the positive predictions were truly positive, and how many of the true positives were found. <a href="https://developers.google.com/machine-learning/crash-course/classification/accuracy-precision-recall">read more</a></p>
</li>
<li>
<p>Regression: For tasks that predict a continuous value (like forecasting house prices), we measure the error. A common metric is the Mean Squared Error (MSE), which penalizes larger errors more heavily</p>
</li>
<li>
<p>Reinforcement Learning: For game-playing or robotic control, success is often measured by a reward signal—for instance, the total score achieved in a game or the time taken to complete a task.</p>
</li>
</ul>
<p>The key takeaway is that AI performance isn't a vague, philosophical concept. It's a quantifiable measure of how well a system achieves its specified objective.</p>
<h3>Symbolic AI and Sub-Symbolic AI</h3>
<h4>Symbolic AI</h4>
<p>Symbolic AI dominated the field from the 1950s to the 1980s. It's based on the hypothesis that intelligence can be achieved by manipulating symbols according to formal rules.</p>
<p>Knowledge Representation and Logic: the core idea is to represent human knowledge in a formal language, like First-Order Logic. We define objects, properties, and relations, and use logical rules to reason about them. This is the foundation of expert systems, which were popular in the 80s for tasks like medical diagnosis. They contained a knowledge base of expert rules and an inference engine to derive new conclusions.</p>
<p>Now, If you can represent a problem in terms of a state space (all possible configurations), then solving the problem becomes a matter of searching for a path from the initial state to a goal state. This is fundamental to everything from route planning in GPS to solving a Rubik's Cube.</p>
<ul>
<li>Uninformed Search: These algorithms have no information about the goal's location. They systematically explore the state space.</li>
</ul>
<p>Breadth-First Search (BFS): Explores all neighbors of a node before moving to the next level. Guaranteed to find the shallowest solution.</p>
<p>Depth-First Search (DFS): Explores as far down one path as possible before backtracking. More memory-efficient but can get lost in infinite paths.</p>
<ul>
<li>Informed (Heuristic) Search: These algorithms use a heuristic—an educated guess or rule of thumb—to estimate the distance to the goal. This dramatically speeds up the search.</li>
</ul>
<p>Greedy Best-First Search: Always expands the node that appears to be closest to the goal. It's fast but can be misled by a bad heuristic.</p>
<p>A* Search: The gold standard. It combines the cost to reach the current node, g(n), with the estimated cost to get from the current node to the goal, h(n). It seeks to minimize f(n)=g(n)+h(n). A* is guaranteed to find the optimal solution if the heuristic h(n) never overestimates the true cost.</p>
<h4>Sub-Symbolic AI</h4>
<p>Symbolic AI struggles with the messiness and uncertainty of the real world. How do you write down logical rules for identifying a cat in a photo? The sub-symbolic approach, dominated by Machine Learning (ML), takes a different path: it learns the rules from data. Instead of hand-crafting rules, we provide a model with a vast number of examples and let it learn the underlying patterns.</p>
<p>Machine Learning Paradigms</p>
<ul>
<li>Supervised Learning: This is the most common form of ML. The model is trained on a labeled dataset, where each data point has a known outcome or &quot;label.&quot; The model's job is to learn the mapping from input to output.</li>
</ul>
<p>Classification: The output is a discrete category (e.g., spam or not spam, cat or dog).</p>
<p>Regression: The output is a continuous value (e.g., predicting the price of a house).</p>
<ul>
<li>Unsupervised Learning: Here, the model is given unlabeled data and must find hidden structures or patterns on its own.</li>
</ul>
<p>Clustering: Grouping similar data points together (e.g., segmenting customers based on purchasing behavior).</p>
<p>Dimensionality Reduction: Simplifying data by reducing the number of variables while preserving important information.</p>
<ul>
<li>Reinforcement Learning (RL): This paradigm is inspired by behavioral psychology. An agent learns by interacting with an environment. It receives rewards for good actions and penalties for bad ones. Over many trials, the agent learns a policy—a strategy for choosing actions that maximize its cumulative reward. This is the technique behind AI systems that master games like Go (AlphaGo) and control robots.</li>
</ul>
<ul>
<li>Note: Symbolic AI are called &quot;white box&quot; models because their decision-making process is transparent and interpretable by humans while Sub-Symbolic AI are called &quot;black box&quot; models because they are opaque and difficult to understand.</li>
</ul>
<h2>The Rational Agent</h2>
<p>An agent is anything that can be viewed as perceiving its environment through sensors and acting upon that environment through actuators. It is rational if it acts to maximize the expected value of a performance measure, given the evidence provided by its perceptual history.</p>
<h4>The PEAS framework</h4>
<ul>
<li>Performance Measure</li>
<li>Enviroment</li>
<li>Actuators</li>
<li>Sensors</li>
</ul>
<p>example:</p>
<table>
<thead>
<tr>
<th>Agent Type</th>
<th>Performance Measure</th>
<th>Environment</th>
<th>Actuators</th>
<th>Sensors</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Self-Driving Car</strong></td>
<td>Safety, speed, legality, comfort, efficiency</td>
<td>Roads, traffic, pedestrians, weather</td>
<td>Steering, accelerator, brake, signals</td>
<td>Cameras, LiDAR, GPS, sonar, speedometer</td>
</tr>
<tr>
<td><strong>Spam Filter</strong></td>
<td>Minimizing false positives and false negatives</td>
<td>User's email account, mail servers</td>
<td>Mark as spam, move to folder</td>
<td>Incoming email text and metadata</td>
</tr>
<tr>
<td><strong>Medical Diagnosis System</strong></td>
<td>Patient health, minimized cost, correct diagnosis</td>
<td>Patient, hospital, staff</td>
<td>Questions, tests, treatments</td>
<td>Patient symptoms, test results, patient answers</td>
</tr>
</tbody>
</table>
<h4>Properties of Enviroments</h4>
<ul>
<li>Fully vs Partially Observable</li>
<li>Deterministic vs Stochastic</li>
<li>Episodic vs Sequential</li>
<li>Static vs Dynamic</li>
<li>Discrete vs Continuous</li>
<li>Single Agent vs Multi Agent</li>
</ul>
<p>--&gt; brainstorm this</p>
<h4>Agent Architecture</h4>
<ol>
<li>
<p>Simple Reflex Agents: select actions based on the current percept, ignoring the rest of the percept history.</p>
</li>
<li>
<p>Model-Based Reflex Agents: To handle partial observability, an agent needs to maintain an internal model of the world. It tracks how the world evolves and how its own actions affect the world. This allows it to make decisions based on an unperceived state.</p>
</li>
</ol>
<p>It chooses an action based on a set of pre-programmed condition-action rules. The key difference from a Simple Reflex Agent is what the &quot;condition&quot; is matched against.</p>
<pre><code>A Simple Reflex Agent matches the condition against the current sensor data (IF car_in_front_brakes THEN brake).

A Model-Based Agent matches the condition against its internal model of the world (IF car_in_front_brakes AND my_internal_model_says_road_is_wet THEN brake_gently).
</code></pre>
<ol start="3">
<li>
<p>Goal-Based Reflex Agents: Knowing about the world isn't enough; the agent needs a goal to aim for. These agents consider future actions and choose the one that will achieve their goal. Search and planning are key activities for goal-based agents. The agent might ask, &quot;Which sequence of actions will get me from City A to City B?&quot;</p>
</li>
<li>
<p>Utility-Based Agents: Sometimes there are multiple paths to the goal, or multiple goals. A utility function maps a state to a real number, which describes the associated degree of &quot;happiness&quot; or desirability. A rational utility-based agent chooses the action that maximizes the expected utility. This is useful when goals are conflicting (e.g., speed vs. safety in a self-driving car).</p>
</li>
</ol>
<h4>A learning Agent</h4>
<p>A learning agent can be divided into four conceptual components:</p>
<p>Learning Element: This is responsible for making improvements. It uses feedback from the critic to modify the performance element.</p>
<p>Performance Element: This is what we have been calling the &quot;agent&quot; so far. It takes in percepts and decides on actions.</p>
<p>Critic: This component provides feedback. It looks at how the agent is doing with respect to a fixed performance standard and tells the learning element how the performance element should be modified. This feedback could be a reward signal in reinforcement learning.</p>
<p>Problem Generator: This component is responsible for suggesting actions that will lead to new and informative experiences. It encourages exploration, preventing the agent from getting stuck in a rut.<a href="https://www.simform.com/blog/types-of-ai-agents/">more with diagram</a></p>
<h3>AI in real world</h3>
<p>(for reading reference only)</p>
<h4>Advantages</h4>
<ol>
<li>
<p>Automation and Efficiency: AI can perform complex, repetitive tasks 24/7 without fatigue, freeing up humans for more creative and strategic work.</p>
</li>
<li>
<p>Scale and Speed: AI can analyze petabytes of data in minutes, a task that would be impossible for humans. This allows us to find patterns in everything from genomic data to astronomical surveys.</p>
</li>
<li>
<p>Accuracy and Precision: In well-defined tasks, AI can surpass human accuracy, reducing errors in critical applications like medical diagnosis and manufacturing.</p>
</li>
<li>
<p>Personalization: AI enables services to be tailored to individual users on a massive scale, from personalized learning plans to targeted advertising.</p>
</li>
</ol>
<h4>Disadvantages</h4>
<ol>
<li>
<p>Data Dependency: Most modern AI is data-hungry. The performance of a model is highly dependent on the quality and quantity of its training data. &quot;Garbage in, garbage out&quot; is the rule.</p>
</li>
<li>
<p>Bias and Fairness: AI models learn from data, and if that data reflects existing societal biases (e.g., gender or racial bias in hiring data), the model will learn and often amplify those biases.</p>
</li>
<li>
<p>Lack of Common Sense: AI systems have a very narrow understanding of the world. An AI that is a grandmaster at chess has no concept of what a chess piece is, why humans play games, or that it shouldn't be put in a glass of water. It lacks the general, common-sense reasoning that humans take for granted.</p>
</li>
<li>
<p>The &quot;Black Box&quot; Problem: As mentioned, the decisions of complex models like deep neural networks can be opaque. This is a huge problem in high-stakes domains like finance and medicine, where we need to understand why a decision was made.</p>
</li>
<li>
<p>Ethical Concerns: The rise of AI brings a host of difficult ethical questions: job displacement due to automation, privacy concerns from mass data collection, the potential for autonomous weapons, and the spread of AI-generated misinformation (&quot;deepfakes&quot;).</p>
</li>
</ol>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 102.5]]></title>
        <id>https://asquare.blog/posts/ai102.5</id>
        <link href="https://asquare.blog/posts/ai102.5"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>AI 102 in Action: The Case of the Martian Biosignature 🤖🪐</h3>
<p>In our last post, we built the theoretical engine for a reasoning machine. Now, let's put that engine to the test with a complex, real-world scenario.</p>
<p>Imagine the Curiosity rover on Mars. It's not just a vehicle; it's a robotic scientist with a <strong>Knowledge Base (KB)</strong> of scientific facts. It just drilled a rock sample and now needs to determine if that sample contains evidence of life, based on its pre-programmed knowledge.</p>
<p>This is not a task for simple pattern matching; it requires a chain of logical deduction. Let's see how the rover uses Resolution and Unification to make a new discovery.</p>
<hr>
<h3>The Scenario</h3>
<ul>
<li><strong>Goal:</strong> The rover, <code>Curiosity</code>, needs to prove that a sample, <code>RockA</code>, contains evidence of ancient life.</li>
<li><strong>Query:</strong> <code>EvidenceOfLife(RockA)</code></li>
</ul>
<hr>
<h3>1. The Knowledge Base (KB) in Predicate Logic</h3>
<p>The rover has the following facts and rules programmed into its memory.</p>
<p><strong>Facts:</strong></p>
<ol>
<li>Curiosity is a rover: <code>Rover(Curiosity)</code></li>
<li>RockA is a sample: <code>Sample(RockA)</code></li>
<li>Curiosity drilled RockA: <code>Drilled(Curiosity, RockA)</code></li>
<li>RockA contains methane: <code>Contains(RockA, Methane)</code></li>
<li>Methane is an organic molecule: <code>Organic(Methane)</code></li>
</ol>
<p><strong>Rules (General Scientific Knowledge):</strong> 6. Any sample that contains an organic molecule is considered a biosignature.<br>
<code>∀x ∀y (Sample(x) ∧ Contains(x, y) ∧ Organic(y)) ⇒ Biosignature(x)</code> 7. If a sample is a biosignature, it is considered to have evidence of ancient life.<br>
<code>∀x (Sample(x) ∧ Biosignature(x)) ⇒ EvidenceOfLife(x)</code></p>
<hr>
<h3>2. The Proof: Step-by-Step Automated Reasoning</h3>
<p>The rover's task is to prove <code>EvidenceOfLife(RockA)</code> is true given its KB. It will use proof by contradiction.</p>
<h4>Step 2.1: Convert the KB to Clause Form (CNF)</h4>
<p>First, every sentence must be converted into a standard clause.</p>
<ul>
<li><strong>C1:</strong> <code>Rover(Curiosity)</code></li>
<li><strong>C2:</strong> <code>Sample(RockA)</code></li>
<li><strong>C3:</strong> <code>Drilled(Curiosity, RockA)</code></li>
<li><strong>C4:</strong> <code>Contains(RockA, Methane)</code></li>
<li><strong>C5:</strong> <code>Organic(Methane)</code></li>
<li><strong>C6:</strong> <code>¬Sample(x) ∨ ¬Contains(x, y) ∨ ¬Organic(y) ∨ Biosignature(x)</code></li>
<li><strong>C7:</strong> <code>¬Sample(x) ∨ ¬Biosignature(x) ∨ EvidenceOfLife(x)</code></li>
</ul>
<p><em>(Note: The fact <code>Drilled(Curiosity, RockA)</code> isn't strictly necessary for this specific proof, but a real-world KB would contain many related facts.)</em></p>
<h4>Step 2.2: Negate the Goal</h4>
<p>To begin the proof by contradiction, we assert the opposite of what we want to prove and add it to our set of clauses.</p>
<ul>
<li><strong>C8:</strong> <code>¬EvidenceOfLife(RockA)</code></li>
</ul>
<p>Now, the stage is set. The rover will apply the Resolution algorithm repeatedly, hoping to derive the <strong>empty clause ()</strong>, which signifies a contradiction.</p>
<h4>Step 2.3: The Resolution Process 🔬</h4>
<p>Let's follow the rover's logical steps. It will combine clauses that contain complementary literals, using <strong>Unification</strong> to match variables.</p>
<p><strong>Resolution 1: Seeking evidence</strong></p>
<ul>
<li>The rover starts with its negated goal (<strong>C8</strong>) and looks for a clause to resolve it with. Clause <strong>C7</strong> contains <code>EvidenceOfLife(x)</code>.</li>
<li><strong>Clauses:</strong>
<ul>
<li><code>¬Sample(x) ∨ ¬Biosignature(x) ∨ EvidenceOfLife(x)</code> (C7)</li>
<li><code>¬EvidenceOfLife(RockA)</code> (C8)</li>
</ul>
</li>
<li>The literals <code>EvidenceOfLife(x)</code> and <code>¬EvidenceOfLife(RockA)</code> can be made complementary.</li>
<li><strong>Unification:</strong> The algorithm finds the Most General Unifier (MGU) <code>{x / RockA}</code>.</li>
<li><strong>Result (C9):</strong> Applying the substitution and resolving the clauses leaves us with a new clause: <code>¬Sample(RockA) ∨ ¬Biosignature(RockA)</code></li>
</ul>
<p><strong>Resolution 2: What makes a biosignature?</strong></p>
<ul>
<li>The new clause <strong>C9</strong> contains <code>¬Biosignature(RockA)</code>. The rover finds Clause <strong>C6</strong>, which contains <code>Biosignature(x)</code>.</li>
<li><strong>Clauses:</strong>
<ul>
<li><code>¬Sample(x) ∨ ¬Contains(x, y) ∨ ¬Organic(y) ∨ Biosignature(x)</code> (C6)</li>
<li><code>¬Sample(RockA) ∨ ¬Biosignature(RockA)</code> (C9)</li>
</ul>
</li>
<li><strong>Unification:</strong> To match <code>Biosignature(x)</code> and <code>¬Biosignature(RockA)</code>, the MGU is <code>{x / RockA}</code>.</li>
<li><strong>Result (C10):</strong> We apply the substitution to both clauses and combine them, removing the <code>Biosignature</code> literals. Note that <code>¬Sample(RockA)</code> appears twice, but we only need to list it once.<br>
<code>¬Sample(RockA) ∨ ¬Contains(RockA, y) ∨ ¬Organic(y)</code></li>
</ul>
<p><strong>Resolution 3: Checking the sample's contents</strong></p>
<ul>
<li>Clause <strong>C10</strong> contains <code>¬Contains(RockA, y)</code>. The rover's KB has a fact about what <code>RockA</code> contains in <strong>C4</strong>.</li>
<li><strong>Clauses:</strong>
<ul>
<li><code>¬Sample(RockA) ∨ ¬Contains(RockA, y) ∨ ¬Organic(y)</code> (C10)</li>
<li><code>Contains(RockA, Methane)</code> (C4)</li>
</ul>
</li>
<li><strong>Unification:</strong> To match <code>¬Contains(RockA, y)</code> and <code>Contains(RockA, Methane)</code>, the MGU is <code>{y / Methane}</code>.</li>
<li><strong>Result (C11):</strong> <code>¬Sample(RockA) ∨ ¬Organic(Methane)</code></li>
</ul>
<p><strong>Resolution 4: Confirming the sample</strong></p>
<ul>
<li>Clause <strong>C11</strong> has two negative literals. The rover can resolve <code>¬Sample(RockA)</code> with the simple fact in <strong>C2</strong>.</li>
<li><strong>Clauses:</strong>
<ul>
<li><code>¬Sample(RockA) ∨ ¬Organic(Methane)</code> (C11)</li>
<li><code>Sample(RockA)</code> (C2)</li>
</ul>
</li>
<li><strong>Unification:</strong> No variables, this is a direct match.</li>
<li><strong>Result (C12):</strong> <code>¬Organic(Methane)</code></li>
</ul>
<p><strong>Resolution 5: The Final Contradiction</strong></p>
<ul>
<li>The rover is now left with a single literal in clause <strong>C12</strong>. It checks its KB and finds the direct opposite in <strong>C5</strong>.</li>
<li><strong>Clauses:</strong>
<ul>
<li><code>¬Organic(Methane)</code> (C12)</li>
<li><code>Organic(Methane)</code> (C5)</li>
</ul>
</li>
<li><strong>Result:</strong> <strong>The Empty Clause ()</strong></li>
</ul>
<hr>
<h3>3. Conclusion: Discovery Made!</h3>
<p>The rover has successfully derived the empty clause. This is a definitive logical contradiction. This proves that the initial assumption—that <code>RockA</code> did <em>not</em> have evidence of life—must be false.</p>
<p>Therefore, the rover has logically proven that <strong><code>EvidenceOfLife(RockA)</code> is true.</strong> It can now confidently transmit this new, derived knowledge back to mission control, having made a discovery not by seeing it directly, but by reasoning from the facts and rules it already knew.</p>
<p>This example, while simplified, shows the immense power of symbolic reasoning. By representing knowledge in a formal language and applying a single, powerful inference rule, an AI can navigate complex webs of facts to deduce new, non-obvious truths about its world.</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 102]]></title>
        <id>https://asquare.blog/posts/ai102</id>
        <link href="https://asquare.blog/posts/ai102"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>Propositional Logic (PL)</h2>
<p>The simplest form of logic is <strong>Propositional Logic</strong>. It's a formal system built around <strong>propositions</strong>, which are declarative sentences that can be either <strong>true</strong> or <strong>false</strong>, but not both.</p>
<ul>
<li><code>&quot;It is raining.&quot;</code> (This can be true or false)</li>
<li><code>&quot;The battery is full.&quot;</code> (This can be true or false)</li>
<li><code>&quot;2 + 2 = 4&quot;</code> (This is always true, so it's a valid proposition)</li>
</ul>
<p>To build meaningful statements, we combine these symbols using a set of logical connectives.</p>
<table>
<thead>
<tr>
<th style="text-align:left">Connective</th>
<th style="text-align:left">Symbol</th>
<th style="text-align:left">Meaning</th>
<th style="text-align:left">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>Negation</strong></td>
<td style="text-align:left">$¬$</td>
<td style="text-align:left">NOT</td>
<td style="text-align:left"><code>¬P</code> (&quot;It is <strong>not</strong> raining.&quot;)</td>
</tr>
<tr>
<td style="text-align:left"><strong>Conjunction</strong></td>
<td style="text-align:left">$∧$</td>
<td style="text-align:left">AND</td>
<td style="text-align:left"><code>P ∧ Q</code> (&quot;It is raining <strong>and</strong> it is cloudy.&quot;)</td>
</tr>
<tr>
<td style="text-align:left"><strong>Disjunction</strong></td>
<td style="text-align:left">$∨$</td>
<td style="text-align:left">OR</td>
<td style="text-align:left"><code>P ∨ Q</code> (&quot;It is raining <strong>or</strong> it is cloudy.&quot;)</td>
</tr>
<tr>
<td style="text-align:left"><strong>Implication</strong></td>
<td style="text-align:left">$⇒$</td>
<td style="text-align:left">Implies (If... then...)</td>
<td style="text-align:left"><code>P ⇒ Q</code> (&quot;<strong>If</strong> it is raining, <strong>then</strong> it is cloudy.&quot;)</td>
</tr>
<tr>
<td style="text-align:left"><strong>Biconditional</strong></td>
<td style="text-align:left">$⇔$</td>
<td style="text-align:left">If and only if</td>
<td style="text-align:left"><code>P ⇔ Q</code> (&quot;It is raining <strong>if and only if</strong> it is cloudy.&quot;)</td>
</tr>
</tbody>
</table>
<h3>Syntax and Semantics</h3>
<p>Difference: Syntax is the set of rules for a language's grammar and structure, ensuring that expressions are correctly formed. Semantics, on the other hand, focuses on the meaning of those expressions, interpreting what they actually convey</p>
<p>The <strong>semantics</strong>, or meaning, of these connectives are defined by <strong>truth tables</strong>. These tables show the truth value of a complex sentence for every possible combination of truth values of its simple components. Here is the crucial truth table for implication ($⇒$):</p>
<table>
<thead>
<tr>
<th style="text-align:center">P</th>
<th style="text-align:center">Q</th>
<th style="text-align:center">P ⇒ Q</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">F</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">F</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
<td style="text-align:center">T</td>
</tr>
</tbody>
</table>
<h3>The Problem with Propositional Logic</h3>
<p>Propositional logic is great, but it's fundamentally limited. It can't describe the world at a fine-grained level. Consider this famous argument:</p>
<ol>
<li>All humans are mortal.</li>
<li>Socrates is a human.</li>
<li>Therefore, Socrates is mortal.</li>
</ol>
<p>In propositional logic, we'd have to assign this to symbols:</p>
<ul>
<li>P = &quot;All humans are mortal.&quot;</li>
<li>Q = &quot;Socrates is a human.&quot;</li>
<li>R = &quot;Socrates is mortal.&quot;</li>
</ul>
<p>There is no way within the rules of PL to connect P, Q, and R to derive the conclusion. The logic doesn't understand that &quot;Socrates&quot; is a specific instance of a &quot;human&quot; or that the property &quot;mortal&quot; applies to all humans. We need a richer language.</p>
<hr>
<h2>Predicate Logic</h2>
<p><strong>Predicate Logic</strong>, also known as <strong>First-Order Logic (FOL)</strong>, extends propositional logic with more expressive components. It allows us to talk about <strong>objects</strong>, their <strong>properties</strong>, and the <strong>relations</strong> between them.</p>
<p>Here are its new building blocks:</p>
<ul>
<li><strong>Objects:</strong> Refer to specific things in the world (e.g., <code>Socrates</code>, <code>Cat</code>, <code>House</code>).</li>
<li><strong>Predicates:</strong> Represent properties of objects or relations between them. A predicate is like a function that returns true or false. Examples:
<ul>
<li><code>Human(Socrates)</code> - A property: &quot;Socrates is a human.&quot;</li>
<li><code>Brother(John, Richard)</code> - A relation: &quot;John is the brother of Richard.&quot;</li>
</ul>
</li>
<li><strong>Quantifiers:</strong> These are symbols that let us talk about groups of objects.
<ul>
<li><strong>Universal Quantifier (∀):</strong> Means &quot;For all...&quot; or &quot;For every...&quot;. It makes a statement about every object in the universe.
<blockquote>
<p><code>∀x Human(x) ⇒ Mortal(x)</code><br>
(Reads: &quot;For every object x, if x is a human, then x is mortal.&quot;)</p>
</blockquote>
</li>
<li><strong>Existential Quantifier (∃):</strong> Means &quot;There exists...&quot; or &quot;For some...&quot;. It makes a statement about at least one object.
<blockquote>
<p><code>∃x Cat(x) ∧ Likes(x, Fish)</code><br>
(Reads: &quot;There exists an object x such that x is a cat and x likes fish.&quot;)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>Now, with Predicate Logic, our Socrates argument is simple and logically sound. We can represent our knowledge and reason with it effectively.</p>
<hr>
<h2>Resolution</h2>
<p>Okay, so we have a powerful language to store knowledge. But how does an AI <em>use</em> this knowledge to prove new things? We could define dozens of small inference rules (like Modus Ponens), but that's inefficient for a computer.</p>
<p>We need a single, powerful inference algorithm that is <strong>complete</strong> (meaning it can prove any provable statement). That algorithm is <strong>Resolution</strong>.</p>
<p>Resolution is a method for proving theorems by contradiction. The basic strategy is:</p>
<ol>
<li>Assume the <strong>opposite</strong> of what you want to prove.</li>
<li>Show that this assumption, when combined with your existing knowledge, leads to an undeniable contradiction.</li>
<li>Conclude that because your assumption led to a contradiction, it must be false. Therefore, the thing you originally wanted to prove must be true.</li>
</ol>
<h3>Prerequisite: Clause Form</h3>
<p>Resolution requires all our logical sentences to be in a standard format called <strong>Clause Form</strong> or <strong>Conjunctive Normal Form (CNF)</strong>. A sentence is in CNF if it's a set of <strong>clauses</strong> connected by ANDs, where each clause is a set of <strong>literals</strong> connected by ORs.</p>
<ul>
<li>A <strong>literal</strong> is an atomic proposition (like <code>P</code>) or its negation (<code>¬P</code>).</li>
<li>A <strong>clause</strong> is a disjunction of literals (e.g., <code>(¬Human(x) ∨ Mortal(x))</code>).</li>
</ul>
<p>Any sentence in propositional or predicate logic can be converted into CNF through a standard procedure. For our Socrates example, the knowledge becomes:</p>
<ol>
<li><code>∀x Human(x) ⇒ Mortal(x)</code> converts to the clause <code>(¬Human(x) ∨ Mortal(x))</code>.</li>
<li><code>Human(Socrates)</code> is already the clause <code>(Human(Socrates))</code>.</li>
</ol>
<h3>Resolution in Propositional Logic</h3>
<p>The resolution rule is beautifully simple. If you have two clauses that contain a complementary literal (e.g., <code>P</code> and <code>¬P</code>), you can combine them and cancel out that pair.</p>
<p>For example, consider these two clauses:</p>
<ol>
<li><code>(Cloudy ∨ Raining)</code></li>
<li><code>(¬Cloudy ∨ Wet_Grass)</code></li>
</ol>
<p>Intuitively, we know that it's either cloudy or it isn't.</p>
<ul>
<li>If <code>Cloudy</code> is <strong>false</strong>, then from clause 1, <code>Raining</code> must be true.</li>
<li>If <code>Cloudy</code> is <strong>true</strong>, then from clause 2, <code>Wet_Grass</code> must be true.<br>
Since <code>Cloudy</code> must be one or the other, we can conclude that <strong><code>(Raining ∨ Wet_Grass)</code></strong> must be true. This new clause is the <strong>resolvent</strong>.</li>
</ul>
<h3>Resolution in Predicate Logic &amp; The Unification Algorithm</h3>
<p>In predicate logic, things get tricky because of variables. You can't resolve <code>(¬Human(x) ∨ Mortal(x))</code> with <code>(Human(Socrates))</code> because <code>x</code> and <code>Socrates</code> are not an exact complementary match.</p>
<p>This is where <strong>Unification</strong> comes in.</p>
<p><strong>Unification</strong> is an algorithm for finding a <strong>substitution</strong> that makes two different logical expressions look identical. A substitution is a mapping of variables to terms.</p>
<p>Let's say we want to unify:</p>
<ul>
<li><code>Knows(John, x)</code></li>
<li><code>Knows(y, MotherOf(y))</code></li>
</ul>
<p>The unification algorithm finds the <strong>Most General Unifier (MGU)</strong>, which is the substitution that makes the expressions identical while being as general as possible. The MGU here would be <code>{y / John, x / MotherOf(John)}</code>. Applying this substitution gives us the identical expression <code>Knows(John, MotherOf(John))</code>.</p>
<h3>Putting It All Together: A Full Example</h3>
<p>Let's use Resolution with Unification to formally prove that Socrates is mortal.</p>
<p><strong>1. Knowledge Base (KB) in Clause Form:</strong></p>
<ul>
<li>Clause 1: <code>(¬Human(x) ∨ Mortal(x))</code></li>
<li>Clause 2: <code>(Human(Socrates))</code></li>
</ul>
<p><strong>2. Goal to Prove:</strong> <code>Mortal(Socrates)</code></p>
<p><strong>3. Proof by Contradiction:</strong></p>
<ul>
<li><strong>Negate the goal:</strong> <code>¬Mortal(Socrates)</code>. This becomes our third clause.</li>
<li><strong>KB now contains:</strong>
<ol>
<li><code>(¬Human(x) ∨ Mortal(x))</code></li>
<li><code>(Human(Socrates))</code></li>
<li><code>(¬Mortal(Socrates))</code></li>
</ol>
</li>
</ul>
<p><strong>4. Apply Resolution:</strong></p>
<ul>
<li>
<p><strong>Step A:</strong> Let's resolve Clause 1 and Clause 3.</p>
<ul>
<li>We want to match the literals <code>Mortal(x)</code> and <code>¬Mortal(Socrates)</code>.</li>
<li>Unification finds the MGU: <code>{x / Socrates}</code>.</li>
<li>Apply this substitution to Clause 1, which becomes <code>(¬Human(Socrates) ∨ Mortal(Socrates))</code>.</li>
<li>Now, resolve this with <code>(¬Mortal(Socrates))</code>. The complementary literals <code>Mortal(Socrates)</code> and <code>¬Mortal(Socrates)</code> cancel out.</li>
<li><strong>Our new resolvent is: <code>(¬Human(Socrates))</code></strong>.</li>
</ul>
</li>
<li>
<p><strong>Step B:</strong> Our KB now effectively contains:</p>
<ol>
<li><code>(Human(Socrates))</code> (from the original KB)</li>
<li><code>(¬Human(Socrates))</code> (the new clause we just derived)</li>
</ol>
</li>
<li>
<p><strong>Step C:</strong> Resolve these two clauses. They are a direct contradiction. When you resolve <code>P</code> and <code>¬P</code>, you are left with nothing. This is called the <strong>empty clause ()</strong>.</p>
</li>
</ul>
<p><strong>5. Conclusion:</strong><br>
We have derived the empty clause! This signifies a contradiction. Our initial assumption—that <code>¬Mortal(Socrates)</code> was true—must be false. Therefore, the original goal, <strong><code>Mortal(Socrates)</code></strong>, is proven to be <strong>true</strong>.</p>
<hr>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 103.5]]></title>
        <id>https://asquare.blog/posts/ai103.5</id>
        <link href="https://asquare.blog/posts/ai103.5"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>Part 1: The Dataset - Agricultural Pest Detection</h3>
<p>Imagine we're building a system for a smart farming drone. The drone's camera measures physical characteristics of insects it finds, and our goal is to classify them as either a &quot;Beneficial Insect&quot; (like a bee, label <code>0</code>) or a &quot;Harmful Pest&quot; (like a locust, label <code>1</code>).</p>
<p>Here is our raw data for six insects the drone has scanned:</p>
<table>
<thead>
<tr>
<th style="text-align:left">SampleID</th>
<th style="text-align:left">Size (mm)</th>
<th style="text-align:left">Weight (mg)</th>
<th style="text-align:left">Wing_Span (mm)</th>
<th style="text-align:left">Type (Label)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">10</td>
<td style="text-align:left">150</td>
<td style="text-align:left">22</td>
<td style="text-align:left">1 (Harmful)</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">5</td>
<td style="text-align:left">50</td>
<td style="text-align:left">10</td>
<td style="text-align:left">0 (Beneficial)</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">12</td>
<td style="text-align:left">160</td>
<td style="text-align:left">25</td>
<td style="text-align:left">1 (Harmful)</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">7</td>
<td style="text-align:left">80</td>
<td style="text-align:left">15</td>
<td style="text-align:left">0 (Beneficial)</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">15</td>
<td style="text-align:left">200</td>
<td style="text-align:left">30</td>
<td style="text-align:left">1 (Harmful)</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">6</td>
<td style="text-align:left">65</td>
<td style="text-align:left">12</td>
<td style="text-align:left">0 (Beneficial)</td>
</tr>
</tbody>
</table>
<p>Looking at this raw data, we can immediately spot a problem. The <code>Weight (mg)</code> feature has values that are roughly 10-20 times larger than the <code>Size (mm)</code> feature. An algorithm that uses distance calculations (like k-Nearest Neighbors) would be completely dominated by the <code>Weight</code> feature, practically ignoring the others. We need to fix this.</p>
<hr>
<h3>Part 2: Data Preprocessing - Standardization in Action</h3>
<p>To solve the scaling issue, we'll apply <strong>Standardization (Z-score Scaling)</strong>, which will give each feature a mean of 0 and a standard deviation of 1.</p>
<p>The formula is: $x_{std} = \frac{x - \mu}{\sigma}$</p>
<p><strong>Step 1: Calculate Mean ($μ$) and Standard Deviation ($σ$) for each feature.</strong></p>
<ul>
<li><strong>Size (mm):</strong>
<ul>
<li>$μ_{size} = (10+5+12+7+15+6) / 6 = 9.17$</li>
<li>$σ_{size} = 3.69$</li>
</ul>
</li>
<li><strong>Weight (mg):</strong>
<ul>
<li>$μ_{weight} = (150+50+160+80+200+65) / 6 = 117.5$</li>
<li>$σ_{weight} = 59.4$</li>
</ul>
</li>
<li><strong>Wing_Span (mm):</strong>
<ul>
<li>$μ_{span} = (22+10+25+15+30+12) / 6 = 19.0$</li>
<li>$σ_{span} = 7.4$</li>
</ul>
</li>
</ul>
<p><strong>Step 2: Apply the formula to each data point.</strong></p>
<p>Let's calculate the standardized value for Sample 1 (<code>Size = 10</code>):<br>
$x_{std} = (10 - 9.17) / 3.69 = 0.22$</p>
<p>After doing this for every value, our dataset is transformed:</p>
<table>
<thead>
<tr>
<th style="text-align:left">SampleID</th>
<th style="text-align:left">Size (std)</th>
<th style="text-align:left">Weight (std)</th>
<th style="text-align:left">Wing_Span (std)</th>
<th style="text-align:left">Type (Label)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0.22</td>
<td style="text-align:left">0.55</td>
<td style="text-align:left">0.41</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">-1.13</td>
<td style="text-align:left">-1.14</td>
<td style="text-align:left">-1.22</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">0.77</td>
<td style="text-align:left">0.72</td>
<td style="text-align:left">0.81</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">-0.59</td>
<td style="text-align:left">-0.63</td>
<td style="text-align:left">-0.54</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">1.58</td>
<td style="text-align:left">1.39</td>
<td style="text-align:left">1.49</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">-0.86</td>
<td style="text-align:left">-0.88</td>
<td style="text-align:left">-0.95</td>
<td style="text-align:left">0</td>
</tr>
</tbody>
</table>
<p>Now all features are on the same scale, and no single feature will unfairly dominate the learning process.</p>
<hr>
<h3>Part 3: Evaluation Strategy - 3-Fold Cross-Validation</h3>
<p>With our data preprocessed, how do we evaluate a model trained on it? A simple train-test split is risky with a small dataset. Instead, we'll use <strong>3-fold Cross-Validation</strong>.</p>
<p>First, we split our 6-sample dataset into 3 &quot;folds&quot;:</p>
<ul>
<li><strong>Fold 1:</strong> {Sample 1, Sample 2}</li>
<li><strong>Fold 2:</strong> {Sample 3, Sample 4}</li>
<li><strong>Fold 3:</strong> {Sample 5, Sample 6}</li>
</ul>
<p>Now we perform three rounds of training and validation:</p>
<ul>
<li>
<p><strong>Round 1:</strong></p>
<ul>
<li><strong>Train on:</strong> Folds 2 &amp; 3 ({S3, S4, S5, S6})</li>
<li><strong>Validate on:</strong> Fold 1 ({S1, S2})</li>
<li>Let's say our model predicts correctly, <strong>Validation Accuracy = 100%</strong>.</li>
</ul>
</li>
<li>
<p><strong>Round 2:</strong></p>
<ul>
<li><strong>Train on:</strong> Folds 1 &amp; 3 ({S1, S2, S5, S6})</li>
<li><strong>Validate on:</strong> Fold 2 ({S3, S4})</li>
<li>Let's say it predicts S3 correctly but S4 incorrectly, <strong>Validation Accuracy = 50%</strong>.</li>
</ul>
</li>
<li>
<p><strong>Round 3:</strong></p>
<ul>
<li><strong>Train on:</strong> Folds 1 &amp; 2 ({S1, S2, S3, S4})</li>
<li><strong>Validate on:</strong> Fold 3 ({S5, S6})</li>
<li>Let's say it predicts correctly, <strong>Validation Accuracy = 100%</strong>.</li>
</ul>
</li>
</ul>
<p><strong>Final Result:</strong> The cross-validated accuracy is the average of the scores from each round:<br>
$$Final;Accuracy = \frac{100% + 50% + 100%}{3} = 83.3%$$<br>
This gives us a much more reliable estimate of the model's performance than a single split.</p>
<hr>
<h3>Part 4: Dimensionality Reduction - Applying PCA</h3>
<p>Our dataset has three features. For visualization and efficiency, let's see if we can reduce it to two dimensions using <strong>Principal Component Analysis (PCA)</strong>. We won't do the full matrix algebra here, but we'll walk through the conceptual steps.</p>
<ol>
<li>
<p><strong>Start with Standardized Data:</strong> PCA is sensitive to scale, so this step is mandatory. We'll use our standardized table from Part 2.</p>
</li>
<li>
<p><strong>Compute Covariance Matrix:</strong> We calculate a 3x3 covariance matrix that shows how the features (<code>Size</code>, <code>Weight</code>, <code>Wing_Span</code>) vary with each other. We notice that they are all highly correlated—bigger insects tend to be heavier and have larger wingspans.</p>
</li>
<li>
<p><strong>Calculate Eigenvectors &amp; Eigenvalues:</strong> We find the eigenvectors and eigenvalues of the covariance matrix. The eigenvectors represent the new dimensions (the Principal Components), and the eigenvalues tell us how much variance each new dimension captures.</p>
</li>
<li>
<p><strong>Select Components:</strong> Let's say the analysis gives us these (hypothetical) eigenvalues:</p>
<ul>
<li>Eigenvalue for PC1: <strong>2.75</strong></li>
<li>Eigenvalue for PC2: <strong>0.20</strong></li>
<li>Eigenvalue for PC3: <strong>0.05</strong></li>
<li><strong>Total Variance</strong> (sum of eigenvalues) = 2.75 + 0.20 + 0.05 = 3.0</li>
<li><strong>Variance explained by PC1:</strong> $2.75 / 3.0 = 91.7%$</li>
<li><strong>Variance explained by PC2:</strong> $0.20 / 3.0 = 6.7%$</li>
</ul>
<p>Together, the first two principal components capture $91.7% + 6.7% = 98.4%$ of the total variance in the data! We can safely discard the third component.</p>
</li>
<li>
<p><strong>Transform Data:</strong> We project our 3D standardized data onto the 2D subspace defined by PC1 and PC2. The result is a brand new dataset:</p>
</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">SampleID</th>
<th style="text-align:left">Principal Component 1</th>
<th style="text-align:left">Principal Component 2</th>
<th style="text-align:left">Type (Label)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0.65</td>
<td style="text-align:left">-0.10</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">-1.82</td>
<td style="text-align:left">0.05</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">1.15</td>
<td style="text-align:left">-0.08</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">-0.92</td>
<td style="text-align:left">0.04</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">2.49</td>
<td style="text-align:left">0.15</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">-1.54</td>
<td style="text-align:left">-0.06</td>
<td style="text-align:left">0</td>
</tr>
</tbody>
</table>
<p>We now have a 2D dataset that is much easier to visualize and can lead to faster model training, all while retaining 98.4% of the original information.</p>
<h3>Conclusion: Ready for Learning</h3>
<p>We have successfully taken a raw dataset and put it through a rigorous data preparation pipeline. We:</p>
<ol>
<li><strong>Cleaned</strong> it by standardizing the features.</li>
<li>Devised a <strong>robust evaluation plan</strong> with cross-validation.</li>
<li><strong>Engineered</strong> a more efficient set of features using PCA.</li>
</ol>
<p>This processed data is now in the ideal state to be fed into a machine learning algorithm. We've laid the solid groundwork required to build a model that is not only accurate but also reliable and efficient. In our next session, we'll finally take this data and train a classification model.</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 103]]></title>
        <id>https://asquare.blog/posts/ai103</id>
        <link href="https://asquare.blog/posts/ai103"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>Part 1: Datasets</h3>
<p>At its heart, machine learning is about finding patterns in data. The data itself is organized into a <strong>dataset</strong>, which is typically a table of examples.</p>
<ul>
<li>Each row represents a <strong>sample</strong> (also called an example, instance, or data point).</li>
<li>Each column represents a <strong>feature</strong> (also called an attribute or variable).</li>
</ul>
<h4>Feature Sets and Labels</h4>
<p>A typical dataset for supervised learning is split into two parts:</p>
<ul>
<li><strong>Features:</strong> These are the input variables, the pieces of information we have. In a dataset to predict house prices, the features might be <code>Square_Footage</code>, <code>Num_Bedrooms</code>, and <code>Year_Built</code>. The collection of all features for a single sample is its <strong>feature set</strong> or <strong>feature vector</strong>.</li>
<li><strong>Label:</strong> This is the output variable, the thing we are trying to predict. For the housing dataset, the label would be <code>Price</code>.</li>
</ul>
<p>The fundamental goal of a supervised ML model is to learn the relationship—the hidden pattern—that connects the feature set to the label.</p>
<hr>
<h3>Preparing Data for Learning - Preprocessing</h3>
<p>A common saying in machine learning is <strong>&quot;Garbage in, garbage out.&quot;</strong> A sophisticated algorithm fed with poor-quality data will produce poor results. That's why a huge amount of a data scientist's time is spent on preparing and cleaning the dataset. This involves several key steps:</p>
<ul>
<li><strong>Handling Missing Values:</strong> Real-world datasets often have holes. A model can't handle a missing value, so we must decide on a strategy, such as filling it with the mean or median of the column (imputation) or dropping the row entirely.</li>
<li><strong>Feature Engineering:</strong> This is the creative process of creating new, more powerful features from existing ones. For example, from <code>Num_Accidents</code> and <code>Years_Driving</code>, we could engineer a new feature called <code>Accidents_Per_Year</code>, which might be more predictive.</li>
<li><strong>Feature Scaling:</strong> Many ML algorithms are sensitive to the scale of the features. If one feature ranges from 0-1 and another from 0-100,000, the algorithm might incorrectly assume the second feature is more important. We fix this by scaling the data, typically with one of two methods:
<ul>
<li><strong>Normalization (Min-Max Scaling):</strong> Rescales the data to a fixed range, usually 0 to 1. The formula for a feature value $x$ is:<br>
$$x_{norm} = \frac{x - x_{min}}{x_{max} - x_{min}}$$</li>
<li><strong>Standardization (Z-score):</strong> Rescales the data to have a mean ($μ$) of 0 and a standard deviation ($σ$) of 1. The formula is:<br>
$$x_{std} = \frac{x - \mu}{\sigma}$$</li>
</ul>
</li>
</ul>
<hr>
<h3>Part 3: How a Model Generalizes - Dataset Division</h3>
<p>Let's say we have our clean dataset. The goal is to train a model that performs well not just on the data we have, but on new, unseen data. This is the concept of <strong>generalization</strong>.</p>
<h4>The Enemy: Overfitting</h4>
<p>The biggest obstacle to generalization is <strong>overfitting</strong>. This happens when a model learns the training data <em>too</em> well. It memorizes not only the underlying patterns but also the noise and random fluctuations specific to that data.</p>
<p>Think of a student who memorizes the exact questions and answers from a practice exam. They'll ace that practice test, but when they see slightly different questions on the real exam, they will fail because they never learned the underlying concepts. An overfitted model is just like that.</p>
<h4>The Solution: Splitting the Dataset</h4>
<p>To prevent overfitting and to properly evaluate our model, we never train on our entire dataset. We split it into three distinct sets:</p>
<ol>
<li><strong>Training Set (60-80%):</strong> This is the data the model actually &quot;sees&quot; and learns from. The model adjusts its internal parameters based on the patterns in this set.</li>
<li><strong>Validation Set (10-20%):</strong> After training, we use this set to see how the model performs on data it hasn't seen before. We use this set to tune the model's <strong>hyperparameters</strong>—the external settings of the model, like its complexity or learning rate. We can tweak the model and re-evaluate on the validation set until we are happy with its performance.</li>
<li><strong>Test Set (10-20%):</strong> This set is the final exam. We keep it locked away and only use it <em>once</em>, at the very end, after all training and tuning is complete. The performance on the test set gives us an unbiased estimate of how our model will perform in the real world on completely new data.</li>
</ol>
<h4>The Gold Standard: Cross-Validation</h4>
<p>A single train-validation split can be subject to luck. Maybe we were just lucky (or unlucky) with the specific data points that ended up in our validation set. A more robust technique is <strong>k-fold Cross-Validation</strong>.</p>
<p>Here's how it works:</p>
<ol>
<li>We split our data (minus the test set) into <code>k</code> equal-sized parts, or &quot;folds&quot; (e.g., 5 or 10).</li>
<li>We perform <code>k</code> rounds of training. In each round, we use one fold as the validation set and the remaining <code>k-1</code> folds as the training set.</li>
<li>We average the performance scores from all <code>k</code> rounds.</li>
</ol>
<p>This gives us a much more reliable estimate of our model's performance and reduces the impact of random chance in the split.</p>
<hr>
<h3>Part 4: Taming Complexity - Dimensionality Reduction</h3>
<p>Sometimes, our datasets have too many features. While more data is often good, too many features (or dimensions) can lead to the <strong>Curse of Dimensionality</strong>. In very high-dimensional spaces, data points become sparse and far apart, making it harder for a model to find patterns. It also increases computational costs and the risk of overfitting.</p>
<p><strong>Dimensionality Reduction</strong> techniques aim to reduce the number of features while retaining as much useful information as possible.</p>
<h4>Principal Component Analysis (PCA)</h4>
<p>PCA is an <strong>unsupervised</strong> technique that transforms the data into a new set of features, called <strong>principal components</strong>. It works by finding the directions of maximum <strong>variance</strong> in the data. The first principal component is the direction that captures the most variation, the second captures the next most (and is perpendicular to the first), and so on. We can then keep only the first few components, effectively reducing the dimensionality while keeping the most important information.</p>
<p><strong>Analogy:</strong> Imagine trying to capture the essence of a 3D car model in a 2D photograph. You wouldn't take the picture from the top or bottom. You'd find the angle (like a side view) that shows the most defining features. PCA is like finding that best angle for your data.</p>
<h4>Linear Discriminant Analysis (LDA)</h4>
<p>LDA is a <strong>supervised</strong> technique, meaning it uses the class labels. While PCA tries to find the directions of maximum variance, LDA tries to find the directions that <strong>maximize the separability between classes</strong>. It projects the data onto a lower-dimensional space in a way that pushes different classes as far apart as possible.</p>
<p><strong>Analogy:</strong> Imagine you have red and blue marbles scattered in a 3D box. PCA would find the axis along which the marbles are most spread out, regardless of color. LDA would find the axis that, when you look along it, shows the clearest separation between the cluster of red marbles and the cluster of blue marbles.</p>
<h4>Independent Component Analysis (ICA)</h4>
<p>ICA is another <strong>unsupervised</strong> technique with a different goal. It assumes that your observed features are a mixture of some underlying, independent sources. ICA tries to &quot;unmix&quot; them.</p>
<p><strong>Analogy:</strong> This is famously known as the <strong>&quot;cocktail party problem.&quot;</strong> Imagine you are in a room with two people talking, and you have two microphones placed at different spots. Each microphone records a mixture of both voices. ICA is the algorithm that can take those two mixed recordings and separate them back into two clean recordings, one for each speaker. In data analysis, it's used to find underlying hidden factors that are statistically independent.</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 104.5]]></title>
        <id>https://asquare.blog/posts/ai104</id>
        <link href="https://asquare.blog/posts/ai104"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3>Supervised Learning: Learning with a Teacher 👨‍🏫</h3>
<p><strong>Supervised learning</strong> is the most common and straightforward type of machine learning. The core idea is that you provide the algorithm with <strong>labeled data</strong>. This means that for every data sample, you also provide the &quot;correct answer,&quot; or label.</p>
<p>Think of it like studying with flashcards. On one side, you have the question (the input features), and on the other, you have the answer (the output label). After seeing enough examples, you start to learn the pattern that connects the questions to the answers.</p>
<p>Mathematically, the goal is to learn an approximate mapping function, $f$, that can map new, unseen input data ($X$) to an output label ($Y$).<br>
$$Y \approx f(X)$$</p>
<p>Supervised learning is primarily used for two types of tasks: Regression and Classification.</p>
<h4>A. Regression: Predicting Continuous Values</h4>
<p><strong>Regression</strong> is used when the output label you're trying to predict is a continuous, numerical value. You're not predicting a category, but a quantity.</p>
<ul>
<li>
<p><strong>Example Problems:</strong></p>
<ul>
<li>Predicting the price of a house based on its size, location, and number of bedrooms.</li>
<li>Forecasting the temperature for tomorrow.</li>
<li>Estimating a person's age from a photograph.</li>
</ul>
</li>
<li>
<p><strong>Types of Regression:</strong></p>
<ul>
<li>
<p><strong>Linear Regression:</strong> This is the simplest form, where the model tries to fit a straight line (or a higher-dimensional plane) that best represents the data. The formula is:<br>
$$y = \beta_0 + \beta_1x_1 + \beta_2x_2 + ... + \beta_nx_n + \epsilon$$</p>
<ul>
<li><strong>Polynomial Regression:</strong> Used when the relationship between the features and the label isn't a straight line. The model fits a curved line to better capture the pattern.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4>B. Classification: Predicting Discrete Categories</h4>
<p><strong>Classification</strong> is used when the output label is a discrete category. The model's job is to assign a class label to a new, unseen sample.</p>
<ul>
<li><strong>Example Problems:</strong>
<ul>
<li>Is this email <strong>spam</strong> or <strong>not spam</strong>?</li>
<li>Does this medical image show a <strong>malignant</strong> or <strong>benign</strong> tumor?</li>
<li>Is this handwritten digit a <strong>0, 1, 2, ... or 9</strong>?</li>
</ul>
</li>
</ul>
<hr>
<h3>Unsupervised Learning: Finding Patterns on Your Own 🕵️‍♂️</h3>
<p>What if you don't have labeled data? That's where <strong>unsupervised learning</strong> comes in. In this case, you provide the model with a dataset that only has input features ($X$) and no corresponding labels ($Y$). The model's task is to explore the data and find meaningful structures or patterns on its own.</p>
<p>Think of being given a box of assorted Lego bricks with no instructions. You might start grouping them by color, size, or shape. You're creating clusters of similar bricks without being told what the &quot;correct&quot; groups are.</p>
<h4>Clustering</h4>
<p>The most common unsupervised learning task is <strong>clustering</strong>. The goal is to group the data points in such a way that samples within the same group (or cluster) are very similar to each other, while samples in different groups are very different.</p>
<ul>
<li><strong>Example Problems:</strong>
<ul>
<li>Segmenting customers into different marketing groups based on their purchasing behavior.</li>
<li>Grouping similar news articles together.</li>
<li>Identifying distinct communities within a social network.</li>
</ul>
</li>
</ul>
<hr>
<h3>Reinforcement Learning: Learning from Trial and Error 🤖</h3>
<p><strong>Reinforcement Learning (RL)</strong> is a completely different paradigm. It's not about learning from a static dataset but about an <strong>agent</strong> learning to behave in an <strong>environment</strong>. The agent learns by taking <strong>actions</strong> and receiving <strong>rewards</strong> or <strong>penalties</strong> as feedback.</p>
<p>The goal of the agent is to learn a strategy, or <strong>policy</strong>, that maximizes its total reward over time.</p>
<ul>
<li><strong>Analogy:</strong> This is exactly how you train a pet. You command your dog to &quot;sit.&quot; If it sits, you give it a treat (a positive reward). If it walks away, it gets nothing. Over time, the dog learns the policy: the action &quot;sit&quot; in the state &quot;hearing the 'sit' command&quot; leads to a reward.</li>
</ul>
<ul>
<li><strong>Example Problems:</strong>
<ul>
<li>Training an AI to play a game like chess, Go, or a video game. The reward is winning the game or achieving a high score.</li>
<li>Teaching a robot how to walk. The reward could be for moving forward without falling.</li>
<li>Optimizing the energy consumption of a data center.</li>
</ul>
</li>
</ul>
<hr>
<h3>Semi-supervised Machine Learning: A Hybrid Approach 🤝</h3>
<p><strong>Semi-supervised learning</strong> is a bridge between supervised and unsupervised learning. It's used for situations where you have a small amount of <strong>labeled data</strong> and a vast amount of <strong>unlabeled data</strong>. This scenario is very common because labeling data can be expensive and time-consuming.</p>
<p>The model uses the unlabeled data to first learn the general structure and patterns of the data (like in unsupervised learning). Then, it uses the small amount of labeled data to refine its understanding and attach meaning to those patterns.</p>
<ul>
<li><strong>Example Problem:</strong>
<ul>
<li>A service like Google Photos has billions of unlabeled user photos. When you manually tag your friend &quot;John&quot; in a few pictures (providing a small amount of labeled data), the service can use the patterns it has learned from all photos to find every other picture of John in your library.</li>
</ul>
</li>
</ul>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Artificial Intelligence 105]]></title>
        <id>https://asquare.blog/posts/ai105</id>
        <link href="https://asquare.blog/posts/ai105"/>
        <updated>2025-09-21T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<h2>AI for Society</h2>
<p>AI is being deployed as a force for good, with a particular focus on empowering vulnerable communities and protecting our planet.</p>
<h3>AI for Women</h3>
<ul>
<li><strong>Healthcare:</strong> AI is making significant strides in women's health. Machine learning models can analyze mammograms and Pap smear slides to detect signs of breast and cervical cancer, often with higher accuracy and at earlier stages than human specialists. AI also powers personalized medicine, tailoring treatments for conditions like endometriosis or polycystic ovary syndrome (PCOS) based on an individual's unique data.</li>
<li><strong>Safety:</strong> AI-powered systems enhance safety for women in public and private spaces. This includes smart city surveillance that can automatically detect signs of distress or aggression, mobile apps that can send real-time alerts to emergency contacts, and sophisticated algorithms that work to identify and filter out online harassment and abuse on social media platforms.</li>
<li><strong>Economic Empowerment:</strong> By analyzing job market data, AI can provide women with personalized career coaching and recommendations for upskilling. In hiring, AI tools are being developed to identify and mitigate unconscious bias in job descriptions and resume screening, helping to level the playing field for female candidates.</li>
</ul>
<h3>AI for the Environment 🌍</h3>
<ul>
<li><strong>Climate Modeling:</strong> AI can process petabytes of satellite data, ocean sensor readings, and atmospheric measurements to build highly accurate models of Earth's climate. These models help scientists predict the impact of climate change with greater confidence and simulate the potential effects of different environmental policies.</li>
<li><strong>Biodiversity Conservation:</strong> Drones equipped with AI-powered computer vision can monitor vast, remote areas to track endangered species populations, identify signs of illegal deforestation, and detect poachers in real-time. This allows conservation teams to respond more quickly and effectively.</li>
<li><strong>Energy Optimization:</strong> AI is the brain behind the &quot;smart grid.&quot; By forecasting energy demand based on weather, time of day, and historical usage, AI helps utility companies reduce waste, prevent outages, and seamlessly integrate fluctuating renewable energy sources like wind and solar power into the national grid.</li>
<li><strong>Sustainable Agriculture:</strong> Known as <strong>precision agriculture</strong>, AI provides farmers with actionable insights. By analyzing data from drones, soil sensors, and weather stations, AI can tell a farmer exactly which crops need water, fertilizer, or pesticides, optimizing resource use, reducing environmental runoff, and increasing crop yields.</li>
</ul>
<hr>
<h2>Applications of Machine Learning Across Industries</h2>
<p>AI and ML are no longer futuristic concepts; they are the operational backbone of modern industry.</p>
<h3>Banking 🏦</h3>
<ul>
<li><strong>Fraud Detection:</strong> ML algorithms are the unsung heroes of financial security. They analyze millions of transactions per second, learning the normal spending patterns for each customer. When a transaction deviates from this pattern—like a purchase in a new country just minutes after a local one—the system flags it as potentially fraudulent in real-time.</li>
<li><strong>Credit Scoring:</strong> Instead of relying on a few traditional data points, ML models can analyze thousands of variables to create a much more nuanced and accurate assessment of a person's creditworthiness, enabling fairer access to loans.</li>
</ul>
<h3>Security 🛡️</h3>
<ul>
<li><strong>Cybersecurity:</strong> AI is a crucial defense against cyberattacks. It learns the baseline behavior of a computer network and can instantly detect anomalies that might signal a malware infection or an unauthorized intrusion. It's also the technology behind modern spam filters that automatically classify and block billions of phishing attempts daily.</li>
<li><strong>Biometric Security:</strong> The face, fingerprint, or voice recognition you use to unlock your phone is powered by machine learning models trained on vast datasets to recognize unique biological patterns.</li>
</ul>
<h3>Healthcare 🩺</h3>
<ul>
<li><strong>Medical Imaging:</strong> Deep learning models, particularly Convolutional Neural Networks (CNNs), are now capable of analyzing medical scans like X-rays, MRIs, and retinal scans to detect diseases such as pneumonia, brain tumors, and diabetic retinopathy with expert-level accuracy.</li>
<li><strong>Drug Discovery:</strong> Developing a new drug can take over a decade and cost billions. AI accelerates this process by predicting how different molecules will behave and identifying promising candidates for new drugs, drastically cutting down research and development time.</li>
</ul>
<h3>Education 🎓</h3>
<ul>
<li><strong>Personalized Learning:</strong> AI-driven educational platforms can adapt to each student's individual learning pace. If a student is struggling with a concept, the system can provide additional resources and practice problems. If they've mastered a topic, it can move them ahead.</li>
<li><strong>Automated Grading:</strong> AI can automate the grading of multiple-choice tests and even some forms of written assessment, freeing up teachers' time from administrative tasks so they can focus on teaching and mentoring students.</li>
</ul>
<h3>Insurance Industry 📄</h3>
<ul>
<li><strong>Risk Assessment:</strong> AI has transformed underwriting. To set a car insurance premium, an ML model can analyze not just a person's driving record but also data from telematics devices in their car to assess their actual driving behavior (like hard braking or speeding), leading to fairer and more accurate pricing.</li>
<li><strong>Automated Claims Processing:</strong> When a car is in an accident, a user can upload photos of the damage. An AI model can then instantly assess the extent of the damage, estimate the repair cost, and in many cases, approve the claim automatically within minutes.</li>
</ul>
<h3>Retail and Supply Chain 🛍️</h3>
<ul>
<li><strong>Recommendation Engines:</strong> The product and movie recommendations you see on sites like Amazon and Netflix are powered by ML. These systems analyze your past behavior and compare it to millions of other users to predict what you might like next.</li>
<li><strong>Demand Forecasting:</strong> Retailers use ML to predict how much of a product will be needed in a specific store at a specific time. This helps prevent items from going out of stock and reduces waste from overstocking, especially for perishable goods.</li>
</ul>
<h3>Transportation and Logistics 🚚</h3>
<ul>
<li><strong>Route Optimization:</strong> Services like Google Maps use ML to analyze real-time traffic conditions, road closures, and speed limits to calculate the most efficient route for your journey, saving millions of hours of travel time collectively every day.</li>
<li><strong>Predictive Maintenance:</strong> AI systems monitor data from sensors on trucks, trains, and airplanes to predict when a part is likely to fail. This allows for maintenance to be scheduled <em>before</em> a breakdown occurs, increasing safety and reliability.</li>
</ul>
<h3>Energy and Utilities ⚡</h3>
<ul>
<li><strong>Infrastructure Monitoring:</strong> Instead of manually inspecting thousands of miles of pipelines or power lines, utility companies use drones and AI to analyze the footage for signs of damage, corrosion, or vegetation encroachment, making maintenance safer and more proactive.</li>
<li><strong>Energy Theft Detection:</strong> By analyzing smart meter data, ML models can identify consumption patterns that are inconsistent with normal usage, flagging potential instances of illegal energy theft and saving utility companies millions.</li>
</ul>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Essential Python Library Cheatsheet]]></title>
        <id>https://asquare.blog/posts/python_cheatsheet</id>
        <link href="https://asquare.blog/posts/python_cheatsheet"/>
        <updated>2025-09-07T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://drive.google.com/drive/folders/11qQGgTfeZBZQbaNqmk63vYE8OkD-vCao?usp=share_link">Cheatsheet</a></p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A list of things we forget about us]]></title>
        <id>https://asquare.blog/posts/wishful_thinking</id>
        <link href="https://asquare.blog/posts/wishful_thinking"/>
        <updated>2025-08-10T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>We live most of our lives half-asleep to the obvious. Not because we’re dumb, but because remembering these truths all the time would probably make us combust. So here’s a little reminder of the properties that sit in the background, the ones we forget, ignore, or try to deny.</p>
<hr>
<h3>Contradiction is natural</h3>
<p>We act like contradictions mean hypocrisy. They don’t. They mean <em>human</em>. Wanting to grind but also rest. Wanting solitude but also love. The clash itself is the system working. To write this list is already a contradiction — trying to pin down what by nature refuses to be pinned.</p>
<hr>
<h3>The body thinks too</h3>
<p>Brains get all the spotlight, but muscles, gut, and breath are doing half the heavy lifting. Your stomach has a nervous system of its own. Your posture changes your mood. A run can solve a problem your “rational” brain couldn’t. The body isn’t just hardware. It’s co-author.</p>
<hr>
<h3>Forgetting is functional</h3>
<p>We treat forgetting as a bug. It’s not. It’s the cleanup crew. The brain burns the junk to make space. Sometimes it torches something we swore was important — and that hurts. But forgetting is the price of moving forward. Memory is selective for a reason.</p>
<hr>
<h3>Obsession is a feature</h3>
<p>Call it obsession, tunnel vision, mania. It’s how we actually learn. Nobody ever mastered anything by staying “balanced” all the time. Falling into the rabbit hole is not dysfunction — it’s how mastery is carved.</p>
<hr>
<h3>The self is fluid</h3>
<p>We cling to identities like they’re bedrock. They’re not. Self is clay. You are not one story. You are drafts upon drafts, edits upon edits. Reinvention is baked into the design.</p>
<hr>
<h3>Rest is not laziness</h3>
<p>Stillness is not a sin. Naps are not moral failure. Boredom is not wasted time. These are maintenance cycles — like turning the system off to cool the circuits. Ignore this and you don’t become more productive, you just break.</p>
<hr>
<h3>The social need</h3>
<p>Even the lone wolves crave an echo. We tell ourselves we don’t need others, but mirrors are built into us. Recognition, witness, connection — these aren’t “nice to haves.” They’re survival.</p>
<hr>
<p>We forget these things because we want to be gods of control. Instead, we’re messy paradox machines, bodies that think, minds that forget, selves that bend. Maybe remembering that is enough.</p>
<hr>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How not to hate yourself]]></title>
        <id>https://asquare.blog/posts/self_love_01</id>
        <link href="https://asquare.blog/posts/self_love_01"/>
        <updated>2025-08-06T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>Have you ever noticed how your perception of yourself changes depending on who surrounds you or what you're doing? One minute, you're energized, inspired, and feeling genuinely fulfilled. The next, you're drained, irritable, and questioning your worth.</p>
<p>I recently found clarity on this issue while reading David Deutsch's &quot;The Beginning of Infinity.&quot; Deutsch contrasts how ordinary people perceive the universe—limited by immediate surroundings—with how astronauts envision the vast, limitless cosmos. This simple yet profound distinction ignited a powerful realization in me:</p>
<p>&quot;I hate myself when I'm surrounded by uninteresting, uninspiring people.&quot;</p>
<p>&quot;I like myself when I'm intellectual, romanticizing life, and immersed in learning.&quot;</p>
<p>So why do we spend so much of our precious time in situations that make us dislike ourselves? Why don't we intentionally choose environments that amplify our self-love and sense of identity?</p>
<p>Here's what I've discovered:</p>
<h3>1. Recognize What Makes You Love Yourself</h3>
<p>Identify the activities, people, and environments that genuinely make you feel alive. For me, it's reading fascinating books, contemplating big ideas, playing music, experimenting with digital art, and embracing my inner nerd. These aren't just hobbies; they're foundational pillars of my identity.</p>
<h3>2. Curate Your Environment Consciously</h3>
<p>If your surroundings shape your identity, then curating them becomes an essential act of self-care. Distance yourself from environments and interactions that drain your energy and self-esteem. Seek connections with people who fuel your intellectual curiosity and emotional growth.</p>
<h3>3. Align Your Actions with Your Identity</h3>
<p>Taking consistent action in alignment with who you truly believe yourself to be builds self-respect. When you live authentically—when your actions echo your identity—self-love naturally deepens. The inner conflict dissolves because you're no longer pretending or compromising your core self.</p>
<h3>4. Embrace Romanticizing Life</h3>
<p>Romanticizing life isn't about ignoring reality. It's about finding beauty and inspiration in the mundane, approaching life with curiosity, wonder, and passion. This perspective enhances your self-image because it nurtures a narrative where you're actively creating meaning.</p>
<h3>5. Guard Your Identity Fiercely</h3>
<p>Protecting your sense of self from external negativity is crucial. Remember that the version of you who thrives intellectually, artistically, and spiritually deserves the utmost care. Shield this precious identity from dilution by superficial, unfulfilling engagements.</p>
<p>By knowing yourself intimately and acting accordingly, you create a life where self-hate has no room to thrive. You're actively nurturing an identity that resonates deeply with your beliefs, passions, and aspirations. Ultimately, self-love flourishes not because you've become perfect, but because you've become authentic.</p>
<p>In a vast universe of infinite possibilities, choosing to love yourself means choosing the path that brings you closest to your true essence. And isn't that the most important journey of all?</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quiet War of Focus]]></title>
        <id>https://asquare.blog/posts/quiet_war_of_focus</id>
        <link href="https://asquare.blog/posts/quiet_war_of_focus"/>
        <updated>2025-08-05T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>Some days the noise outside is deafening. Not just audible sounds—traffic, chatter, a barking dog—but the overwhelming chaos of living in a world constantly screaming for your attention. Notifications, ads, expectations, noise layered on noise, each more urgent than the last.</p>
<p>You wake with purpose—a plan laid out, clear, simple. Yet, before your feet touch the floor, the external chaos floods in, blurring the edges, pulling your mind in a thousand meaningless directions.</p>
<p>That's outer noise—easy to blame, easy to identify. But beneath that obvious chaos lies something more sinister, more subtle:</p>
<p><strong>Inner resistance.</strong></p>
<p>It doesn't shout—it whispers. Gentle, persuasive:</p>
<p>&quot;Maybe you're too tired today.&quot;<br>
&quot;You deserve a break.&quot;<br>
&quot;You might fail anyway.&quot;<br>
&quot;Tomorrow would be better.&quot;</p>
<p>This resistance is cunning. It pretends to be your ally, offering comfort, safety, escape. It weaponizes logic, feeds you half-truths, and watches silently as ambition slips through your fingers like sand.</p>
<p>The truth no one shares enough: <strong>Starting is painful.</strong></p>
<p>Not because the work itself is inherently difficult—though often it is—but because it requires passing through your own invisible barriers, breaking your comfortable illusions, shattering the cocoon of procrastination.</p>
<p>Because real focus isn’t pretty or effortless. It's a messy battle, gritty, exhausting, relentless. You don’t gracefully glide into deep work; you claw your way there, inch by painful inch, fighting every impulse that begs for distraction.</p>
<p>But here’s the strange beauty of relentless focus: <strong>eventually, if you fight long enough, you break through.</strong></p>
<p>The noise doesn’t disappear—it becomes irrelevant. The resistance doesn't vanish—it loses power. You're simply there, quietly working, calmly ruthless, beyond doubt, beyond comfort, beyond the need for immediate reward.</p>
<p>In that quiet, in that rare intensity, there's clarity unlike anything else. The heart rate slows, thoughts sharpen. You become singular—one purpose, one task, one moment unfolding into the next.</p>
<p>This is calm hard work—not tranquil meditation, but disciplined rebellion. Silent, fierce, precise. No applause, no validation, no distractions.</p>
<p>Just you, wrestling with meaning.<br>
Just you, battling noise.<br>
Just you, creating something real.</p>
<p>And when you reach that place, it isn’t victory over the world—it’s victory over yourself.</p>
<p>In a culture obsessed with shortcuts and dopamine hits, choose the harder path:</p>
<p><strong>Sit down, quiet the noise, confront the resistance, and build something with intense, unflinching focus.</strong></p>
<p>That’s the quiet war worth fighting.</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Who am I?]]></title>
        <id>https://asquare.blog/posts/who_am_i</id>
        <link href="https://asquare.blog/posts/who_am_i"/>
        <updated>2025-08-03T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>Maybe I’m human. Or maybe I’m just a shadow pretending to be one. Carbon atoms, water, neurons—star dust that got lucky. Lucky enough to somehow… notice itself.<br>
Self-awareness. That grand illusion. That voice in my head saying <em>I am</em>. But is it real? Or just another line of code in a program that was designed to say <em>I am</em>?</p>
<p>If a machine said “I feel,” would we believe it?<br>
If I stop feeling, stop questioning, stop watching myself—do I stop being human?<br>
Is <em>being human</em> just about having this recursive loop of <em>“I know that I know that I exist”</em>?</p>
<p>Or maybe I’m not even here.<br>
Maybe I’m someone else's hallucination.<br>
Maybe I’m a butterfly dreaming of a boy.<br>
Or a dream inside an android’s hard-coded subconscious.<br>
Wait—can androids even dream?<br>
What <em>is</em> a dream anyway?<br>
A glitch in memory? A story stitched by a sleeping brain?<br>
An echo of something I wanted but couldn’t say?</p>
<p>Maybe I’m not real.<br>
Maybe none of this is.<br>
Maybe we’re just a tape, a sequence of frames running in a simulation nested within a simulation, three layers deep, projected for the idle amusement of some fourth-dimensional beings munching on alien popcorn.<br>
Maybe they’re laughing at this paragraph right now.<br>
Maybe this question is a feature.<br>
Maybe it’s a bug.</p>
<p>But does it matter?</p>
<p>If I’m a dream, then it’s a vivid one.<br>
If I’m a lie, it’s a damn beautiful lie.<br>
If none of this is real, then pain still hurts, music still moves me, and silence still feels holy.<br>
So maybe <em>being real</em> isn’t the point.<br>
Maybe <em>feeling real</em> is.</p>
<p>Maybe I don't need an answer.<br>
Maybe I just need to keep asking.</p>
<p>Who am I?</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Some useful advice]]></title>
        <id>https://asquare.blog/posts/advice</id>
        <link href="https://asquare.blog/posts/advice"/>
        <updated>2025-08-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[advice]]></summary>
        <content type="html"><![CDATA[<p><a href="https://patrickcollison.com/advice">https://patrickcollison.com/advice</a></p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Life worth living]]></title>
        <id>https://asquare.blog/posts/life_worth_living</id>
        <link href="https://asquare.blog/posts/life_worth_living"/>
        <updated>2025-08-01T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>This might be the single most important question you could tackle early in life. First off, let’s accept there is always an answer—even if it feels elusive. But why does this question matter so much? Sure, there are other profound questions like, “What is life?” or “What is the meaning of life?” or even “Why are we here?” But imagine we actually got an answer: say life is a simulation, and your entire purpose is to eat apples. Even if that were true, would you choose to do nothing but eat apples? Probably not. So maybe the answers to those questions aren't as crucial as we think. What really matters, perhaps, is figuring out how to live your life well. But here’s another snag—what exactly is a &quot;good&quot; life? With endless hedonistic pleasures available, defining a good life becomes incredibly complicated. Most people default to happiness as a metric, but if the point isn't solely happiness, then what? Suffering certainly isn't it—that would be too harsh and meaningless. You see the problem? Maybe a better question is: what makes a life truly worth living? For some, it’s family; for others, it's relationships, personal achievements, or finding balance. Everyone has a different perspective.</p>
<p>Let’s try approaching this logically:</p>
<p>If we're defining the &quot;worth&quot; of life, we're assuming life is something measurable. But how do we measure life? Duration? Quality? Both seem inadequate on their own. Logically, value must consider subjective factors (personal happiness, satisfaction, fulfillment) and objective factors (health, productivity, societal contribution). Given the complexity of human experience, subjective perceptions naturally become central—your internal perception fundamentally shapes how worthwhile you feel your life is.</p>
<p>People generally value coherence and consistency between their beliefs and actions—this alignment brings psychological comfort and clarity. If your actions contradict your beliefs, discomfort follows, eroding your life's perceived worth. So logically, coherence between who you are and what you do is vital.</p>
<p>Next, consider meaning. Meaning is essential because it stitches life's disparate events into a cohesive narrative. Without meaning, life fragments into disconnected, confusing episodes. Logically, a clear purpose provides direction, turning experiences into coherent, meaningful parts of your personal narrative.</p>
<p>Another critical piece is fulfillment. Humans naturally seek fulfillment through achieving goals and personal growth. Logically, fulfillment emerges as you set, pursue, and achieve meaningful objectives. Overcoming challenges provides lasting satisfaction, logically enhancing the perceived value of life.</p>
<p>Relationships also logically elevate life's worth. Humans, being inherently social, derive immense value from authentic connections. These genuine relationships—marked by trust, empathy, and mutual growth—dramatically improve life's perceived quality and depth.</p>
<p>Contributions matter too. Making a positive impact, whether on others or society, logically adds significant value. Knowing your existence improves lives or advances society gives profound meaning and worth to your life.</p>
<p>Authenticity logically matters because inauthenticity generates internal conflict. Aligning your external actions with your internal identity resolves psychological tension, logically enhancing your emotional health and overall life satisfaction.</p>
<p>Lastly, resilience logically addresses life's unpredictability. Life inevitably includes adversity, and resilience—the ability to effectively adapt to difficult conditions—ensures challenges become opportunities for growth, logically increasing life's value.</p>
<p>Ultimately, examining life logically shows us that coherence, meaningful purpose, fulfillment, authentic relationships, contributions, authenticity, and resilience collectively define what makes a life genuinely worth living.</p>
]]></content>
        <author>
            <name>Anshuman Agrawal</name>
            <email>asquare567@gmail.com</email>
            <uri>https://asquare.blog</uri>
        </author>
    </entry>
</feed>